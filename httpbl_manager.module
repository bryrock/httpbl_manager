<?php
/**
 * @file
 * Code for the httpbl_manager module.
 */

/**
 * Implementation of hook_views_api().
 */
function httpbl_manager_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'httpbl_manager') . '/views',
  );
}

function httpbl_manager_entity_info() {
  $return = array(
    'httpbl' => array(
      'label' => t('Managed http:BL IP'),
      'plural label' => t('Managed http:BL IPs'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'httpbl',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'httpbl_id',
        'bundle' => 'type',
        'label' => 'hostname',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'httpbl_ip' => array(
          'label' => t('http:BL Managed IP', array(), array('context' => 'a managed IP.')),
        ),
      ),
      'load hook' => 'entity_load',
      'label callback' => 'entity_class_label',
      'access callback' => 'managed_ips_access',
      'uri callback' => 'entity_class_uri',
      'module' => 'httpbl_manager',
      'admin ui' => array(
        'access callback' => 'managed_ips_access',
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_permission().
 */
function httpbl_manager_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'admin httpbl manager ips' => array(
      'title' => t('Administer Managed IPs'),
      'description' => t('Administer (create, update, delete) httpBL white, grey and blacklisted IPs.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Access callback for http:BL Manager.
 *
 * Determines whether the given user has access to HttpBL Manager functionality.
 *
 * @param $op
 *   The operation being performed. One of 'view'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $type
 *   Optionally a type to check access for. If nothing is
 *   given, access for all types is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function managed_ips_access($op, $type = NULL, $account = NULL) {
  if (user_access('admin httpbl manager ips', $account)) {
    return TRUE;
  }
  if (isset($type) && isset($type_name)) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name trail", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu_alter(&$items).
 */
function httpbl_manager_menu_alter(&$items) {
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function httpbl_manager_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($form_state['step'] == 'views_form_views_form') {
    // Alter the first step of the VBO form (the selection page).
    $form['select']['#title'] = t('Http:BL Manager Bulk operations');
  }
  elseif ($form_state['step'] == 'views_bulk_operations_config_form') {
    // Alter the configuration step of the VBO form.
   dpm($vbo, '$vbo config form');
   dpm($form, 'vbo config form');
  }
  elseif ($form_state['step'] == 'views_bulk_operations_confirm_form') {
    // Alter the confirmation step of the VBO form.
    dpm($form, 'vbo confirm form');
    dpm($vbo, '$vbo confirm form');

  }
}

/**
 * Implements hook_action_info().
 */
function httpbl_manager_action_info() {
  return array(
    'httpbl_manager_change_listing_status_action' => array(
      'type' => 'entity',
      'label' => t('Change the listing status for a managed IP'),
      'configurable' => TRUE,
      'pass rows' => TRUE,
      'behavior' => array('changes_property'),
      'triggers' => array('entity_presave'),
    ),
    'httpbl_manager_change_expiry_action' => array(
      'type' => 'entity',
      'label' => t('Change the expiration for a managed IP'),
      'configurable' => TRUE,
      'pass rows' => TRUE,
      'behavior' => array('changes_property'),
      'triggers' => array('entity_presave'),
    ),
    'httpbl_manager_notation_action' => array(
      'type' => 'entity',
      'label' => t('Add/Modify notation for a managed IP'),
      'configurable' => TRUE,
      'pass rows' => TRUE,
      'behavior' => array('changes_property'),
      'triggers' => array('entity_presave'),
    ),
  );
}

/**
 * Changes listing status of a managed IP entity.
 *
 * @param $entity
 *   A entity object to modify.
 * @param $context
 *   Array with the following elements:
 *   the following elements:
 *   - (nothing particularly useful, yet).
 *
 * @see httpbl_manager_change_listing_status_action_form()
 * @see httpbl_manager_change_listing_status_action_validate()
 * @see httpbl_manager_change_listing_status_action_submit()
 * @ingroup actions
 *
 * @TODO - When changing list status, set expiry according to httpbl config
 *         settings.
 */
function httpbl_manager_change_listing_status_action($entity, $context) {
  global $user;
  $list_options = array(
    'whitelisted' => HTTPBL_LIST_SAFE,
    'blacklisted' => HTTPBL_LIST_BLACK,
    'greylisted'  => HTTPBL_LIST_GREY,
  );

  $entity->status = $context['listed_status'];
  $entity->modified = REQUEST_TIME;
  $entity->uid = $user->uid;
  $listed_status = array_search($entity->status, $list_options);

  watchdog('httpbl_manager action', 'Changed @type managed ip %ip to %listed.', array('@type' =>  $entity->type, '%ip' => $entity->hostname, '%listed' => $listed_status));

  // Now check whether to also add blacklisted IPs to drupal's blocked_ips table.
  $blocked_ip = FALSE;
  $remove_blocked_ip = FALSE;
  $already_banned = _httpbl_banned_check($entity->hostname);
  $httpbl_cache = variable_get('httpbl_cache', HTTPBL_CACHE_OFF);

  if (module_exists('httpbl') && $context['block_ip'] && $entity->status == HTTPBL_LIST_BLACK) {
    if (!$already_banned) {
      $blocked_ip = TRUE;
    }
  }
  elseif (module_exists('httpbl') && $httpbl_cache == HTTPBL_CACHE_DBDRUPAL && $entity->status == HTTPBL_LIST_BLACK) {
    if (!$already_banned) {
      $blocked_ip = TRUE;
    }
  }

  if ($blocked_ip) {
    db_insert('blocked_ips')
      ->fields(array('ip' => $entity->hostname))
      ->execute();

    watchdog('httpbl_manager action', 'Added IP (%ip) to site banned IPs', array('%ip' => $entity->hostname), WATCHDOG_WARNING, FALSE);
  }

  // Now check whether to remove a blocked IP that no longer belongs in drupal's blocked_ips table.
  if (module_exists('httpbl') && $entity->status != HTTPBL_LIST_BLACK && $already_banned) {
    db_delete('blocked_ips')
      ->condition('ip', $entity->hostname)
      ->execute();

    watchdog('httpbl_manager action', 'Removed IP (%ip) from site banned IPs', array('%ip' => $entity->hostname), WATCHDOG_WARNING, FALSE);
  }
}

/**
 * Generates the settings form for httpbl_manager_change_listing_status_action().
 *
 * @param $context
 *   Array of additional information about what triggered the action. Includes
 *   the following elements:
 *   - (nothing particularly useful, yet).
 *
 * @see httpbl_manager_change_listing_status_action_submit()
 * @see httpbl_manager_change_listing_status_action_validate()
 *
 * @ingroup forms
 */
function httpbl_manager_change_listing_status_action_form($context) {
  $description = t('The listing status you want to assign to this managed IP.');
  $description_block_option = t('Http:bl has an admin setting option to also add blacklisted IPs to Drupal\'s "blocked_ips" table. Check this if you want to ensure a blacklisted IP is added, even if that is not your site\'s default.');
  $listed_status = '';

  // Note: Couldn't find anything useful in $context, so this test should fail
  // to find a default value.
  if (isset($context['listed_status'])) {
    $listed_status = array_search($entity->status, $list_options);
  }

  $list_options = array(
    'whitelisted' => HTTPBL_LIST_SAFE,
    'blacklisted' => HTTPBL_LIST_BLACK,
    'greylisted'  => HTTPBL_LIST_GREY,
  );

  $options = array_keys($list_options);
  $form['listed_status'] = array(
    '#type' => 'select',
    '#title' => t('List Status'),
    '#default_value' => $listed_status,
    '#options' => $options,
    '#description' => $description,
  );
  $form['block_ip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Also block blacklisted IPs?'),
    '#default_value' => FALSE,
    '#description' => $description_block_option,
  );
  return $form;
}

/**
 * Validates settings form for httpbl_manager_change_listing_status_action().
 *
 * @see httpbl_manager_change_listing_status_action_submit()
 */
function httpbl_manager_change_listing_status_action_validate($form, $form_state) {
  // Get block override option.
  $block_override = $form_state['values']['block_ip'];

  if ($form_state['values']['listed_status'] != HTTPBL_LIST_BLACK && $block_override) {
    form_set_error('listed_status', t('You selected the block option but this is not a blacklisted IP'));
  }
}

/**
 * Saves settings form for httpbl_manager_change_listing_status_action().
 *
 * @see httpbl_manager_change_listing_status_action_validate()
 */
function httpbl_manager_change_listing_status_action_submit($form, $form_state) {
  $result = array(
    'listed_status' => $form_state['values']['listed_status'],
    'block_ip' => $form_state['values']['block_ip'],
  );
  return $result;
}

/**
 * Changes listing status of a managed IP entity.
 *
 * @param $entity
 *   A entity object to modify.
 * @param $context
 *   Array with the following elements:
 *   the following elements:
 *   - (nothing particularly useful, yet).
 *
 * @see httpbl_manager_change_expiry_action_form()
 * @see httpbl_manager_change_expiry_action_validate()
 * @see httpbl_manager_change_expiry_action_submit()
 * @ingroup actions
 */
function httpbl_manager_change_expiry_action($entity, $context) {
  global $user;

  $extended = $context['listed_expiry'];
  $extended = REQUEST_TIME + $extended;
  $entity->expire = $extended;
  $entity->modified = REQUEST_TIME;
  $entity->uid = $user->uid;
  $new_expiry = $entity->expire;

  watchdog('httpbl_manager action', 'Changed @type managed ip %ip expiration to %expired.', array('@type' =>  $entity->type, '%ip' => $entity->hostname, '%expired' => format_date($new_expiry)));
}

/**
 * Generates the settings form for httpbl_manager_change_expiry_action().
 *
 * @param $context
 *   Array of additional information about what triggered the action. Includes
 *   the following elements:
 *   - (nothing particularly useful, yet).
 *
 * @see httpbl_manager_change_expiry_action_validate()
 * @see httpbl_manager_change_expiry_action_submit()
 *
 * @ingroup forms
 */
function httpbl_manager_change_expiry_action_form($context) {
  $disclaimer = t('I understand I am defeating the purpose of using httpbl and Honeypot.Org to manage these IPs for me.');
  $description = t('The new expiration date for this managed IP. This will be an added offset from now.  The default time value is based on the length of time in your admin settings in http:BL for blacklisting.');

  $offset_options = drupal_map_assoc(array(10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 1814400, 2419200, 7257600, 15724800, 31536000, 63072000, 94608000, 157680000, 315360000), 'format_interval');

  $form['listed_expiry'] = array(
    '#type' => 'select', 
    '#title' => t('New expiry is NOW + '), 
    '#default_value' => variable_get('httpbl_blacklist_offset', 31536000), 
    '#options' => $offset_options, 
    '#description' => $description,
  );
  $form['disclaimer'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Extended time disclaimer:'), 
    '#default_value' => FALSE, 
    '#description' => $disclaimer,
  );
  return $form;
}

/**
 * Validates settings form for httpbl_manager_change_expiry_action().
 *
 * @see httpbl_manager_change_expiry_action_submit()
 */
function httpbl_manager_change_expiry_action_validate($form, $form_state) {
  // Find the current default expiry on this site for blacklisting.
  $blacklist_default = variable_get('httpbl_blacklist_offset', 31536000);

  if ($form_state['values']['listed_expiry'] > $blacklist_default && !$form_state['values']['disclaimer']) {
    form_set_error('listed_expiry', t('Please acknowledge the disclaimer.'));
  }
}

/**
 * Saves settings form for httpbl_manager_change_expiry_action().
 *
 * @see httpbl_manager_change_expiry_action_validate()
 */
function httpbl_manager_change_expiry_action_submit($form, $form_state) {
  return array('listed_expiry' => $form_state['values']['listed_expiry']);
}

/**
 * Notation for a managed IP entity.
 *
 * @param $entity
 *   A entity object to modify.
 * @param $context
 *   Array with the following elements:
 *   the following elements:
 *   - (nothing particularly useful, yet).
 *
 * @see httpbl_manager_notation_action_form()
 * @see httpbl_manager_notation_action_validate()
 * @see httpbl_manager_notation_action_submit()
 * @ingroup actions
 */
function httpbl_manager_notation_action($entity, $context) {
  global $user;

  $notation = $context['notation'];
  $entity->domain = $notation;
  $entity->modified = REQUEST_TIME;
  $entity->uid = $user->uid;

  watchdog('httpbl_manager action', 'Updated @type managed ip %ip with notation.', array('@type' =>  $entity->type, '%ip' => $entity->hostname));
}

/**
 * Generates the settings form for httpbl_manager_notation_action().
 *
 * @param $context
 *   Array of additional information about what triggered the action. Includes
 *   the following elements:
 *   - (nothing particularly useful, yet).
 *
 * @see httpbl_manager_notation_action_validate()
 * @see httpbl_manager_notation_action_submit()
 *
 * @ingroup forms
 */
function httpbl_manager_notation_action_form($entity, $context) {
  $description = t('Use this for miscellaneous notes about an IP.  Why it\'s blocked or white-listed, the recognizable domain, etc.');

  $selection = array_keys($context['selection']);
  $selection_entity = $entity['view']->result[$selection[0]]->httpbl_id;

  $this_entity = entity_load_single('httpbl', $selection_entity);

  $form['notation'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 128,
    '#title' => t('Notation for this host / domain / IP.'),
    '#default_value' => $this_entity->domain,
    '#required' => FALSE,
    '#description' => $description,
  );

  return $form;
}

/**
 * Validates settings form for httpbl_manager_notation_action().
 *
 * @see httpbl_manager_notation_action_submit()
 */
function httpbl_manager_notation_action_validate($form, $form_state) {
}

/**
 * Saves settings form for httpbl_manager_notation_action().
 *
 * @see httpbl_manager_notation_action_validate()
 */
function httpbl_manager_notation_action_submit($form, $form_state) {
  return array('notation' => $form_state['values']['notation']);
}
